{"version":3,"sources":["components/CustomCheckbox/CustomCheckbox.jsx","App.js","reportWebVitals.js","index.js"],"names":["CustomCheckbox","className","type","App","useState","app__container","setApp__container","task","setTask","toggleValue","toggle","doubleSlash","useRef","join","ref","placeholder","onFocus","e","length","onBlur","filter","el","value","onChange","currentTarget","endsWith","replace","autoFocus","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8TAWeA,EARQ,WACrB,OACE,mCACE,uBAAOC,UAAU,yBAAyBC,KAAK,gBC2EtCC,MA1Ef,WAAgB,IAAD,EAC+BC,mBAAS,CAAC,mBADzC,mBACNC,EADM,KACUC,EADV,OAGWF,mBAAS,IAHpB,mBAGNG,EAHM,KAGAC,EAHA,OAIiBJ,oBAAS,GAJ1B,mBAINK,EAJM,KAIOC,EAJP,KAMPC,EAAcC,iBAAO,MAqB3B,OACE,qBAAKX,UAAU,MAAf,SACE,sBAAKA,UAAWI,EAAeQ,KAAK,KAApC,UACE,cAAC,EAAD,IACCJ,EACC,mCACE,iCACGF,EACD,sBAAMO,IAAKH,EAAaV,UAAU,oBAAlC,qBAMJ,uBACEA,UAAU,kBACVC,KAAK,OACLa,YAAY,mBACZC,QA7BiB,SAACC,GACI,IAA1BZ,EAAea,QACjBZ,EAAkB,GAAD,mBAAKD,GAAL,CAAqB,2BA4BhCc,OAzBgB,SAACF,GACrBZ,EAAea,OAAS,GAC1BZ,EAAkBD,EAAee,QAAO,SAACC,GAAD,MAAe,mBAAPA,OAwB1CC,MAAOf,EACPgB,SAxCgB,SAACN,GACzBT,EAAQS,EAAEO,cAAcF,OACpBL,EAAEO,cAAcF,MAAMG,SAAS,QACjCf,GAAQD,GACRD,EAAQS,EAAEO,cAAcF,MAAMI,QAAQ,KAAM,SAuCzCjB,GACC,uBACEP,KAAK,OACLD,UAAU,kBACVc,YAAY,aACZY,WAAS,IAGb,qBAAK1B,UAAU,qBAAf,SACE,cAAC,IAAD,MAEF,qBAAKA,UAAU,0BAAf,SACE,uBAAMA,UAAU,uBAAhB,UACE,cAAC,IAAD,CAA0BA,UAAU,2BAA4B,IAChE,2CAAqB,IACrB,cAAC,IAAD,CAAgBA,UAAU,qCC7DvB2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b552f135.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./styles/CustomCheckbox.scss\";\n\nconst CustomCheckbox = () => {\n  return (\n    <>\n      <input className=\"custom-checkbox__input\" type=\"checkbox\" />\n    </>\n  );\n};\n\nexport default CustomCheckbox;\n","import \"./App.scss\";\nimport DateRangeIcon from \"@material-ui/icons/DateRange\";\nimport RadioButtonUncheckedIcon from \"@material-ui/icons/RadioButtonUnchecked\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport CustomCheckbox from \"./components/CustomCheckbox/CustomCheckbox\";\nimport { useRef, useState } from \"react\";\n\nfunction App() {\n  const [app__container, setApp__container] = useState([\"app__container\"]);\n\n  const [task, setTask] = useState(\"\");\n  const [toggleValue, toggle] = useState(false);\n\n  const doubleSlash = useRef(null);\n\n  const handleDoubleslesh = (e) => {\n    setTask(e.currentTarget.value);\n    if (e.currentTarget.value.endsWith(\"//\")) {\n      toggle(!toggleValue);\n      setTask(e.currentTarget.value.replace(\"//\", \"\"));\n    }\n  };\n\n  const onTaskFocusHandler = (e) => {\n    if (app__container.length === 1) {\n      setApp__container([...app__container, \"app__container_focus\"]);\n    }\n  };\n  const onTaskBlurHandler = (e) => {\n    if (app__container.length > 1) {\n      setApp__container(app__container.filter((el) => el === \"app__container\"));\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <div className={app__container.join(\" \")}>\n        <CustomCheckbox />\n        {toggleValue ? (\n          <>\n            <span>\n              {task}\n              <span ref={doubleSlash} className=\"app__double-slash\">\n                //\n              </span>\n            </span>\n          </>\n        ) : (\n          <input\n            className=\"app__task-input\"\n            type=\"text\"\n            placeholder=\"Write a new task\"\n            onFocus={onTaskFocusHandler}\n            onBlur={onTaskBlurHandler}\n            value={task}\n            onChange={handleDoubleslesh}\n          />\n        )}\n        {toggleValue && (\n          <input\n            type=\"text\"\n            className=\"app__note-input\"\n            placeholder=\"write note\"\n            autoFocus\n          />\n        )}\n        <div className=\"app__calendar-logo\">\n          <DateRangeIcon />\n        </div>\n        <div className=\"app__dropdown-container\">\n          <span className=\"app__dropdown-titile\">\n            <RadioButtonUncheckedIcon className=\"app__title-circle-logo\" />{\" \"}\n            <span>No list</span>{\" \"}\n            <ExpandMoreIcon className=\"app__title-arrow-logo\" />\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}